/**
 * 调试用户权限脚本
 * 检查用户的角色分配和权限情况
 */

const BASE_URL = 'http://localhost:3000';

async function makeRequest(url, options = {}) {
  try {
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    });
    
    const data = await response.json();
    return { response, data };
  } catch (error) {
    console.error('Request failed:', error);
    return { error };
  }
}

async function debugUserPermissions() {
  console.log('🔍 调试用户权限问题...\n');
  
  // 1. 测试获取用户列表
  console.log('📋 测试获取用户列表...');
  const { response: usersResponse, data: usersData } = await makeRequest(`${BASE_URL}/api/admin/users`);
  
  console.log('状态码:', usersResponse.status);
  if (usersResponse.ok) {
    console.log('✅ 用户列表获取成功');
    console.log('用户数量:', usersData.users?.length || 0);
    
    if (usersData.users && usersData.users.length > 0) {
      console.log('\n👥 用户列表:');
      usersData.users.forEach((user, index) => {
        console.log(`  ${index + 1}. ${user.username} (${user.role}) - 邮箱数量: ${user.maxEmails || 0}`);
      });
    }
  } else {
    console.log('❌ 用户列表获取失败:', usersData.error);
  }
  
  // 2. 测试邮箱列表访问
  console.log('\n📧 测试邮箱列表访问...');
  const { response: emailsResponse, data: emailsData } = await makeRequest(`${BASE_URL}/api/emails`);
  
  console.log('状态码:', emailsResponse.status);
  if (emailsResponse.ok) {
    console.log('✅ 邮箱列表获取成功');
    console.log('邮箱数量:', emailsData.emails?.length || 0);
    
    if (emailsData.emails && emailsData.emails.length > 0) {
      console.log('\n📮 邮箱列表:');
      emailsData.emails.forEach((email, index) => {
        console.log(`  ${index + 1}. ${email.address} (自动生成: ${email.isAutoGenerated ? '是' : '否'})`);
      });
    }
  } else {
    console.log('❌ 邮箱列表获取失败:', emailsData.error);
    
    if (emailsResponse.status === 401) {
      console.log('💡 提示: 用户未登录');
    } else if (emailsResponse.status === 403) {
      console.log('💡 提示: 用户没有查看邮箱的权限');
      console.log('💡 这可能是权限配置问题');
    }
  }
  
  // 3. 测试配置获取
  console.log('\n⚙️  测试配置获取...');
  const { response: configResponse, data: configData } = await makeRequest(`${BASE_URL}/api/config`);
  
  console.log('状态码:', configResponse.status);
  if (configResponse.ok) {
    console.log('✅ 配置获取成功');
    console.log('配置信息:', JSON.stringify(configData, null, 2));
  } else {
    console.log('❌ 配置获取失败:', configData.error);
  }
}

async function testWithCookies() {
  console.log('\n🍪 尝试使用浏览器 Cookie 进行测试...');
  console.log('💡 请在浏览器中登录后，复制 Cookie 到这里进行测试');
  console.log('💡 或者直接在浏览器开发者工具中运行以下代码:');
  console.log(`
// 在浏览器控制台中运行:
fetch('/api/emails')
  .then(r => r.json())
  .then(data => console.log('邮箱数据:', data))
  .catch(err => console.error('错误:', err));

fetch('/api/admin/users')
  .then(r => r.json())
  .then(data => console.log('用户数据:', data))
  .catch(err => console.error('错误:', err));
  `);
}

async function main() {
  console.log('🚀 MoeMail 用户权限调试工具');
  console.log('=' .repeat(50));
  
  await debugUserPermissions();
  await testWithCookies();
  
  console.log('\n' + '='.repeat(50));
  console.log('🔧 故障排除建议:');
  console.log('1. 确保用户已正确登录');
  console.log('2. 检查用户是否被分配了正确的角色');
  console.log('3. 验证权限配置是否正确');
  console.log('4. 检查中间件配置是否包含所有必要的路径');
  console.log('5. 查看浏览器开发者工具的网络请求详情');
}

main().catch(console.error);
