/**
 * 测试自动邮箱生成功能
 * 这个脚本将测试我们实现的自动邮箱生成功能
 */

const BASE_URL = 'http://localhost:3000';

// 测试数据
const testUser = {
  username: 'testuser001',
  password: 'password123',
  role: 'knight',
  maxEmails: 5,
  email: 'test@example.com'
};

async function makeRequest(url, options = {}) {
  try {
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    });
    
    const data = await response.json();
    return { response, data };
  } catch (error) {
    console.error('Request failed:', error);
    return { error };
  }
}

async function testUserCreation() {
  console.log('🧪 测试用户创建和自动邮箱生成...');
  
  // 1. 尝试创建用户（需要皇帝权限）
  console.log('📝 创建测试用户...');
  const { response, data, error } = await makeRequest(`${BASE_URL}/api/admin/users`, {
    method: 'POST',
    body: JSON.stringify(testUser)
  });
  
  if (error) {
    console.error('❌ 请求失败:', error);
    return;
  }
  
  console.log('📊 响应状态:', response.status);
  console.log('📋 响应数据:', JSON.stringify(data, null, 2));
  
  if (response.ok) {
    console.log('✅ 用户创建成功!');
    console.log(`📧 自动生成了 ${data.emailGeneration?.generatedCount || 0} 个邮箱`);
    
    // 2. 获取用户列表验证
    console.log('\n📋 获取用户列表验证...');
    const { response: listResponse, data: listData } = await makeRequest(`${BASE_URL}/api/admin/users`);
    
    if (listResponse.ok) {
      console.log('✅ 用户列表获取成功!');
      const createdUser = listData.users?.find(u => u.username === testUser.username);
      if (createdUser) {
        console.log('👤 找到创建的用户:', {
          id: createdUser.id,
          username: createdUser.username,
          role: createdUser.role,
          maxEmails: createdUser.maxEmails,
          isAdminCreated: createdUser.isAdminCreated
        });
      }
    }
  } else {
    console.log('❌ 用户创建失败:', data.error || '未知错误');
    
    if (response.status === 403) {
      console.log('💡 提示: 需要皇帝权限才能创建用户');
      console.log('💡 请先在浏览器中登录皇帝账号，然后重新运行测试');
    }
  }
}

async function testEmailList() {
  console.log('\n🧪 测试邮箱列表功能...');
  
  const { response, data, error } = await makeRequest(`${BASE_URL}/api/emails`);
  
  if (error) {
    console.error('❌ 请求失败:', error);
    return;
  }
  
  console.log('📊 响应状态:', response.status);
  
  if (response.ok) {
    console.log('✅ 邮箱列表获取成功!');
    console.log(`📧 找到 ${data.emails?.length || 0} 个邮箱`);
    
    // 检查是否有自动生成的邮箱
    const autoEmails = data.emails?.filter(email => email.isAutoGenerated) || [];
    console.log(`🤖 其中 ${autoEmails.length} 个是自动生成的邮箱`);
    
    if (autoEmails.length > 0) {
      console.log('📋 自动生成的邮箱列表:');
      autoEmails.forEach((email, index) => {
        console.log(`  ${index + 1}. ${email.address} (序号: ${email.emailSequence})`);
      });
    }
  } else {
    console.log('❌ 邮箱列表获取失败:', data.error || '未知错误');
    
    if (response.status === 401) {
      console.log('💡 提示: 需要登录才能查看邮箱列表');
    }
  }
}

async function testEmailCreation() {
  console.log('\n🧪 测试手动创建邮箱（应该被禁止）...');
  
  const { response, data, error } = await makeRequest(`${BASE_URL}/api/emails/generate`, {
    method: 'POST',
    body: JSON.stringify({
      name: 'test',
      domain: 'moemail.app',
      expiresIn: '1h'
    })
  });
  
  if (error) {
    console.error('❌ 请求失败:', error);
    return;
  }
  
  console.log('📊 响应状态:', response.status);
  console.log('📋 响应数据:', JSON.stringify(data, null, 2));
  
  if (response.status === 403) {
    console.log('✅ 正确! 普通用户无法手动创建邮箱');
  } else if (response.ok) {
    console.log('⚠️  警告: 用户仍然可以手动创建邮箱（可能是皇帝权限）');
  } else {
    console.log('❌ 意外的响应状态');
  }
}

async function runTests() {
  console.log('🚀 开始测试 MoeMail 自动邮箱生成功能\n');
  console.log('🌐 测试服务器:', BASE_URL);
  console.log('⏰ 测试时间:', new Date().toLocaleString());
  console.log('=' .repeat(50));
  
  // 测试邮箱列表（不需要特殊权限）
  await testEmailList();
  
  // 测试手动创建邮箱（应该被禁止）
  await testEmailCreation();
  
  // 测试用户创建（需要皇帝权限）
  await testUserCreation();
  
  console.log('\n' + '='.repeat(50));
  console.log('🏁 测试完成!');
  console.log('\n💡 测试说明:');
  console.log('1. 如果看到 403 权限错误，说明权限控制正常工作');
  console.log('2. 要完整测试用户创建功能，需要先在浏览器中登录皇帝账号');
  console.log('3. 可以在浏览器中访问 http://localhost:3000 进行手动测试');
}

// 运行测试
runTests().catch(console.error);
