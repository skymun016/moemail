import { NextResponse } from "next/server"
import { auth, assignRoleToUser, findOrCreateRole } from "@/lib/auth"
import { createDb } from "@/lib/db"
import { users, emails } from "@/lib/schema"
import { eq, and } from "drizzle-orm"
import { PERMISSIONS, ROLES, Role } from "@/lib/permissions"
import { checkPermission } from "@/lib/auth"
import { deleteAutoGeneratedEmails, generateEmailsForUser, getUserAutoEmailStats } from "@/lib/auto-email-generator"
import { setUserExpiry, setUserStatus } from "@/lib/user-status"
import { USER_STATUS, UserStatus } from "@/types/user"
import { z } from "zod"

export const runtime = "edge"

// 更新用户的请求体验证
const updateUserSchema = z.object({
  maxEmails: z.number().min(1, "邮箱数量至少为1").max(100, "邮箱数量最多为100").optional(),
  role: z.enum([ROLES.DUKE, ROLES.KNIGHT, ROLES.CIVILIAN]).optional(),
  expiryTime: z.number().min(0, "有效期不能为负数").optional(), // 有效期（毫秒），0表示永久
  status: z.enum([USER_STATUS.ACTIVE, USER_STATUS.DISABLED, USER_STATUS.SUSPENDED]).optional(),
})

// 获取用户详情
export async function GET(
  request: Request,
  { params }: { params: Promise<{ id: string }> }
) {
  const hasPermission = await checkPermission(PERMISSIONS.PROMOTE_USER)
  if (!hasPermission) {
    return NextResponse.json({ error: "权限不足" }, { status: 403 })
  }

  try {
    const { id } = await params
    const db = createDb()

    const user = await db.query.users.findFirst({
      where: eq(users.id, id),
      with: {
        userRoles: {
          with: {
            role: true
          }
        }
      }
    })

    if (!user) {
      return NextResponse.json({ error: "用户不存在" }, { status: 404 })
    }

    // 获取邮箱统计
    const emailStats = await getUserAutoEmailStats(id)

    return NextResponse.json({
      user: {
        id: user.id,
        username: user.username,
        email: user.email,
        name: user.name,
        maxEmails: user.maxEmails,
        isAdminCreated: user.isAdminCreated,
        createdBy: user.createdBy,
        role: user.userRoles[0]?.role.name || ROLES.CIVILIAN,
      },
      emailStats
    })

  } catch (error) {
    console.error('Failed to fetch user:', error)
    return NextResponse.json(
      { error: "获取用户信息失败" },
      { status: 500 }
    )
  }
}

// 更新用户
export async function PUT(
  request: Request,
  { params }: { params: Promise<{ id: string }> }
) {
  const hasPermission = await checkPermission(PERMISSIONS.PROMOTE_USER)
  if (!hasPermission) {
    return NextResponse.json({ error: "权限不足" }, { status: 403 })
  }

  const session = await auth()
  if (!session?.user?.id) {
    return NextResponse.json({ error: "未授权" }, { status: 401 })
  }

  try {
    const { id } = await params
    const body = await request.json()
    const validatedData = updateUserSchema.parse(body)
    const { maxEmails, role, expiryTime, status } = validatedData

    const db = createDb()

    // 检查用户是否存在
    const user = await db.query.users.findFirst({
      where: eq(users.id, id),
      with: {
        userRoles: {
          with: {
            role: true
          }
        }
      }
    })

    if (!user) {
      return NextResponse.json({ error: "用户不存在" }, { status: 404 })
    }

    // 检查是否尝试修改皇帝
    const currentRole = user.userRoles[0]?.role.name
    if (currentRole === ROLES.EMPEROR) {
      return NextResponse.json({ error: "不能修改皇帝用户" }, { status: 400 })
    }

    const updates: Partial<typeof users.$inferInsert> = {}
    let needsEmailRegeneration = false

    // 更新邮箱数量限制
    if (maxEmails !== undefined && maxEmails !== user.maxEmails) {
      updates.maxEmails = maxEmails
      needsEmailRegeneration = true
    }

    // 更新用户基本信息
    if (Object.keys(updates).length > 0) {
      await db.update(users)
        .set(updates)
        .where(eq(users.id, id))
    }

    // 更新角色
    if (role && role !== currentRole) {
      const userRole = await findOrCreateRole(db, role)
      await assignRoleToUser(db, id, userRole.id)
    }

    // 处理用户有效期设置
    if (expiryTime !== undefined) {
      const expiryResult = await setUserExpiry(id, expiryTime, session.user.id!)
      if (!expiryResult.success) {
        return NextResponse.json(
          { error: expiryResult.error || "设置用户有效期失败" },
          { status: 500 }
        )
      }
    }

    // 处理用户状态设置
    if (status !== undefined) {
      const statusResult = await setUserStatus(id, status, session.user.id!)
      if (!statusResult.success) {
        return NextResponse.json(
          { error: statusResult.error || "设置用户状态失败" },
          { status: 500 }
        )
      }
    }

    // 处理邮箱重新生成
    let emailRegenerationResult = null
    if (needsEmailRegeneration && user.isAdminCreated) {
      // 删除现有的自动生成邮箱
      const deleteResult = await deleteAutoGeneratedEmails(id)

      if (deleteResult.success) {
        // 重新生成邮箱
        emailRegenerationResult = await generateEmailsForUser({
          userId: id,
          username: user.username!,
          maxEmails: maxEmails!,
        })
      }
    }

    return NextResponse.json({
      success: true,
      message: "用户更新成功",
      emailRegeneration: emailRegenerationResult ? {
        success: emailRegenerationResult.success,
        generatedCount: emailRegenerationResult.generatedCount,
        errors: emailRegenerationResult.errors
      } : null
    })

  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: error.errors[0].message },
        { status: 400 }
      )
    }

    console.error('Failed to update user:', error)
    return NextResponse.json(
      { error: "更新用户失败" },
      { status: 500 }
    )
  }
}

// 删除用户
export async function DELETE(
  request: Request,
  { params }: { params: Promise<{ id: string }> }
) {
  const hasPermission = await checkPermission(PERMISSIONS.PROMOTE_USER)
  if (!hasPermission) {
    return NextResponse.json({ error: "权限不足" }, { status: 403 })
  }

  try {
    const { id } = await params
    const db = createDb()

    // 检查用户是否存在
    const user = await db.query.users.findFirst({
      where: eq(users.id, id),
      with: {
        userRoles: {
          with: {
            role: true
          }
        }
      }
    })

    if (!user) {
      return NextResponse.json({ error: "用户不存在" }, { status: 404 })
    }

    // 检查是否尝试删除皇帝
    const currentRole = user.userRoles[0]?.role.name
    if (currentRole === ROLES.EMPEROR) {
      return NextResponse.json({ error: "不能删除皇帝用户" }, { status: 400 })
    }

    // 删除用户（级联删除会自动删除相关的邮箱、角色等）
    await db.delete(users).where(eq(users.id, id))

    return NextResponse.json({
      success: true,
      message: "用户删除成功"
    })

  } catch (error) {
    console.error('Failed to delete user:', error)
    return NextResponse.json(
      { error: "删除用户失败" },
      { status: 500 }
    )
  }
}
